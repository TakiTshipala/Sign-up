{"version":3,"sources":["serviceWorker.js","layouts/LayoutForm/index.js","layouts/LayoutForm/Layout.jsx","components/lib/Textfield.jsx","components/Form/helpers/validation.js","components/lib/Text.jsx","components/Form/withLabel.js","components/Form/Email.js","components/Form/Password.js","components/Form/Username.js","components/lib/Button.jsx","components/Form/Signup/Button.js","components/Form/Signup/context.js","components/Form/Signup/index.js","components/Form/Form.js","app/index.js","index.js"],"names":["Boolean","window","location","hostname","match","LayoutForm","children","className","Textfield","id","type","placeholder","classes","value","onChange","onBlur","onBlurCapture","TextfieldDefault","props","allClasses","concat","isValidatedForm","state","email","fullname","password","isEmail","username","isValidated","isPassword","test","String","toLowerCase","name","isShort","hasDigit","length","isEmpty","text","Text","htmlFor","content","TextDefault","defaultClasses","withLabel","Field","labelText","this","React","Component","Email","e","target","onType","onChangeStyle","onDefault","onSuccess","setState","style","hasError","onError","input","InvalidatedEmailMessage","Password","isSatisified","invalidatedPasswordMessage","hint","requirement","Username","InvalidatedUsernameMessage","Button","onSubmit","disabled","ButtonBrand","SignUp","Consumer","context","createContext","SignupButton","Form","field","Provider","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.065ed95f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import LayoutForm from \"./Layout\"\r\nexport default LayoutForm","import React from \"react\"\r\n\r\nconst FormLayout = ({ children }) => (\r\n    <div className=\"rounded-xl px-12 pt-4 pb-16 bg-gray-100 w-1/3\r\n                    xs:px-6 xs:w-full xs:mx-2 xs:mt-2\r\n                    sm:px-12 sm:w-full sm:mx-32 sm:mt-2\r\n                    md:px-12 md:w-full md:mx-48 md:mt-2\">\r\n        {children}\r\n    </div>\r\n)\r\n\r\nexport default FormLayout","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst Textfield = ({\r\n    id,\r\n    type,\r\n    placeholder,\r\n    classes,\r\n    value,\r\n    onChange,\r\n    onBlur }) => {\r\n\r\n    return <input\r\n        id={id}\r\n        className={classes}\r\n        type={type}\r\n        value={value}\r\n        placeholder={placeholder}\r\n        onChange={onChange}\r\n        onBlurCapture={onBlur} />\r\n}\r\n\r\nconst TextfieldDefault = (props) => {\r\n    let mobileClasses = \"xs:h-10 sm:h-10\"\r\n    let defaultClasses = \"w-full bg-white border outline-none h-12 font-helvetica text-base rounded-sm tracking-wider px-4 py-2 focus:shadow-outline-sm\"\r\n    let allClasses = mobileClasses.concat(\" \" + defaultClasses + \" \" + props.classes)\r\n    return <Textfield {...props} classes={allClasses} />\r\n}\r\n\r\nTextfield.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    onBlur: PropTypes.func,\r\n    classes: PropTypes.string\r\n\r\n}\r\n\r\nexport { TextfieldDefault } ","export const isValidatedForm = (state) => {\r\n    const { email, fullname, password } = state\r\n    return isEmail(email) && username.isValidated(fullname) && isPassword(password)\r\n}\r\n\r\nexport const isEmail = (email) => {\r\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n}\r\n\r\nexport const username = {\r\n    isValidated: (name) => {\r\n        return !username.isShort(name) && !username.hasDigit(name)\r\n    },\r\n    isShort: (name) => {\r\n        return name.length < 6\r\n    },\r\n    hasDigit: (username) => {\r\n        const re = /\\d/;\r\n        return re.test(username.toLowerCase());\r\n    }\r\n}\r\n\r\nexport const isPassword = (password) => {\r\n    return password.length > 8\r\n}\r\n\r\nexport const isEmpty = (text) => {\r\n    return text.length === 0\r\n}","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst Text = ({\r\n    htmlFor,\r\n    content,\r\n    classes }) => {\r\n    return <label htmlFor={htmlFor} className={classes}>{content}</label>\r\n}\r\n\r\nconst TextDefault = (props) => {\r\n    let defaultClasses = \"tracking-wide font-helvatica text-gray-800\"\r\n    return <Text {...props} classes={defaultClasses + \" \" + props.classes} />\r\n}\r\n\r\nText.propTypes = {\r\n    content: PropTypes.string.isRequired,\r\n    classes: PropTypes.string\r\n\r\n}\r\n\r\nexport { TextDefault }","import React from \"react\"\r\nimport { TextDefault as Label } from \"../lib/Text\"\r\n\r\nconst withLabel = Field => {\r\n    class withLabel extends React.Component {\r\n        htmlFor = Field.labelText.toLowerCase();\r\n        content = Field.labelText;\r\n        render() {\r\n            return (<div className=\"mt-3\">\r\n                <Label\r\n                    htmlFor={this.htmlFor}\r\n                    content={this.content}\r\n                    classes=\"font-semibold text-sm\" />\r\n                <Field {...this.props} />\r\n            </div>)\r\n        }\r\n    }\r\n    return withLabel\r\n}\r\n\r\nexport default withLabel","import React from \"react\"\r\nimport { TextfieldDefault as EmailField } from \"../lib/Textfield\"\r\nimport { isEmail, isEmpty } from \"./helpers/validation\"\r\nimport withLabel from \"./withLabel\";\r\n\r\n\r\nclass Email extends React.Component {\r\n\r\n    static placeholder = \"You@example.com\";\r\n    static labelText = \"Email\";\r\n    static InvalidatedEmailMessage = \"You've entered a wrong email syntax\"\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            style: \"\",\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const text = e.target.value;\r\n        this.props.onType(\"email\", text)\r\n        const { onDefault, onSuccess } = this.onChangeStyle\r\n        if (isEmail(text)) {\r\n            onSuccess()\r\n            return\r\n        }\r\n        onDefault()\r\n    }\r\n\r\n    onChangeStyle = {\r\n        onSuccess: () => {\r\n            this.setState({\r\n                style: 'border-green-500 bg-green-100 focus:shadow-none',\r\n                hasError: false\r\n            })\r\n        },\r\n        onError: () => {\r\n            this.setState({\r\n                style: 'border-red-400 bg-red-100 focus:shadow-none',\r\n                hasError: true\r\n            })\r\n        },\r\n        onDefault: () => {\r\n            this.setState({\r\n                style: 'bg-white focus:shadow-outline-sm',\r\n                hasError: false\r\n            })\r\n        }\r\n    }\r\n\r\n    onBlur = (e) => {\r\n        const text = e.target.value;\r\n        const { onError, onDefault } = this.onChangeStyle\r\n        if (isEmpty(text)) {\r\n            onDefault()\r\n            return\r\n        }\r\n        if (!isEmail(text)) {\r\n            onError()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { style, hasError } = this.state\r\n        const { input } = this.props\r\n        return (<div>\r\n            <EmailField\r\n                id=\"email\"\r\n                type=\"email\"\r\n                placeholder={Email.placeholder}\r\n                value={input}\r\n                classes={`mt-1 mb-1 ` + style}\r\n                onChange={this.onChange}\r\n                onBlur={this.onBlur} />\r\n            {\r\n                hasError && <p className=\"text-xs text-red-500 font-helvetica bg-red-100\">{Email.InvalidatedEmailMessage}</p>\r\n            }\r\n\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default withLabel(Email)","import React, { Fragment } from \"react\"\r\nimport { TextfieldDefault as PasswordField } from \"../lib/Textfield\"\r\nimport { TextDefault as PasswordHint } from \"../lib/Text\"\r\nimport { TextDefault as PasswordError } from \"../lib/Text\"\r\nimport { isPassword, isEmpty } from \"./helpers/validation\"\r\nimport withLabel from \"./withLabel\"\r\n\r\n\r\nclass Password extends React.Component {\r\n\r\n    static placeholder = \"••••••••••\"\r\n    static labelText = \"Password\"\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            style: \"\",\r\n            hasError: false,\r\n            isSatisified: false,\r\n            invalidatedPasswordMessage: \"\",\r\n            hint: {\r\n                text: \"Make sure it's at least\",\r\n                requirement: \"8 characters.\"\r\n            }\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const text = e.target.value;\r\n        this.props.onType(\"password\", text)\r\n        const { onDefault, onSuccess } = this.onChangeStyle\r\n        if (isPassword(text)) {\r\n            this.setState({ isSatisified: true })\r\n            onSuccess()\r\n            return\r\n        }\r\n\r\n        this.setState({ isSatisified: false })\r\n        onDefault()\r\n    }\r\n\r\n    onChangeStyle = {\r\n        onSuccess: () => {\r\n            this.setState({\r\n                style: 'border-green-500 bg-green-100 focus:shadow-none',\r\n                hasError: false\r\n            })\r\n        },\r\n        onError: () => {\r\n            this.setState({\r\n                style: 'border-red-400 bg-red-100 focus:shadow-none',\r\n                hasError: true\r\n            })\r\n        },\r\n        onDefault: () => {\r\n            this.setState({\r\n                style: 'bg-white focus:shadow-outline-sm',\r\n                hasError: false\r\n            })\r\n        }\r\n    }\r\n\r\n    onBlur = (e) => {\r\n        const text = e.target.value;\r\n        const { onError, onDefault } = this.onChangeStyle\r\n        if (isEmpty(text)) {\r\n            onDefault()\r\n            return\r\n        }\r\n        if (!isPassword(text)) {\r\n            onError()\r\n            this.setState({ invalidatedPasswordMessage: \"This password is too short\" })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { style, hasError } = this.state\r\n        return <div>\r\n            <PasswordField\r\n                id=\"password\"\r\n                type=\"password\"\r\n                placeholder={Password.placeholder}\r\n                value={this.props.input}\r\n                classes={`mt-1 mb-1 ` + style}\r\n                onChange={this.onChange}\r\n                onBlur={this.onBlur} />\r\n\r\n            <div className=\"flex\">\r\n                {(!hasError &&\r\n                    <Fragment>\r\n                        <PasswordHint\r\n                            content={this.state.hint.text}\r\n                            classes={`text-xs`} />\r\n                        <PasswordHint\r\n                            content={this.state.hint.requirement}\r\n                            classes={(this.state.isSatisified ? `text-green-500` : `text-gray-900`) + ` text-xs font-bold ml-1`} />\r\n                    </Fragment>) ||\r\n                    <PasswordError\r\n                        content={this.state.invalidatedPasswordMessage}\r\n                        classes={`text-red-500 bg-red-100 text-xs`} />}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default withLabel(Password)","import React from \"react\"\r\nimport { TextfieldDefault as UsernameField } from \"../lib/Textfield\"\r\nimport { username, isEmpty } from \"./helpers/validation\"\r\nimport withLabel from \"./withLabel\";\r\n\r\n\r\nclass Username extends React.Component {\r\n\r\n    static placeholder = \"Menai Ala Eddine\"\r\n    static labelText = \"Username\"\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            style: \"\",\r\n            hasError: false,\r\n            InvalidatedUsernameMessage: \"\"\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const text = e.target.value;\r\n        this.props.onType(\"fullname\", text)\r\n        const { onDefault, onSuccess } = this.onChangeStyle\r\n        if (username.isValidated(text)) {\r\n            onSuccess()\r\n            return\r\n        }\r\n        onDefault()\r\n    }\r\n\r\n    onChangeStyle = {\r\n        onSuccess: () => {\r\n            this.setState({\r\n                style: 'border-green-500 bg-green-100 focus:shadow-none',\r\n                hasError: false\r\n            })\r\n        },\r\n        onError: () => {\r\n            this.setState({\r\n                style: 'border-red-400 bg-red-100 focus:shadow-none',\r\n                hasError: true\r\n            })\r\n        },\r\n        onDefault: () => {\r\n            this.setState({\r\n                style: 'bg-white focus:shadow-outline-sm',\r\n                hasError: false\r\n            })\r\n        }\r\n    }\r\n\r\n    onBlur = (e) => {\r\n        const text = e.target.value;\r\n        const { onError, onDefault } = this.onChangeStyle\r\n        if (isEmpty(text)) {\r\n            onDefault()\r\n            return\r\n        }\r\n\r\n        if (username.isShort(text)) {\r\n            this.setState({ InvalidatedUsernameMessage: \"Username is too short\" })\r\n            onError()\r\n        }\r\n\r\n        if (username.hasDigit(text)) {\r\n            this.setState({ InvalidatedUsernameMessage: \"Username should not contains numbers\" })\r\n            onError()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { style, hasError, InvalidatedUsernameMessage } = this.state\r\n        return (\r\n            <div>\r\n                <UsernameField\r\n                    id=\"username\"\r\n                    type=\"text\"\r\n                    value={this.props.input}\r\n                    placeholder={Username.placeholder}\r\n                    classes={`mt-1 mb-1 ` + style}\r\n                    onChange={this.onChange}\r\n                    onBlur={this.onBlur} />\r\n                {\r\n                    hasError && <p className=\"text-xs text-red-500 font-helvetica bg-red-100\">{InvalidatedUsernameMessage}</p>\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withLabel(Username)","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst Button = ({\r\n    type,\r\n    value,\r\n    onSubmit,\r\n    classes,\r\n    disabled }) => {\r\n    return <input\r\n        className={(disabled ? `opacity-50 ` : `opacity-100 `) + classes}\r\n        type={type}\r\n        value={value}\r\n        disabled={disabled}\r\n        onSubmit={onSubmit} />\r\n}\r\n\r\nconst ButtonBrand = (props) => {\r\n    let extraSmallClasses = \"xs:h-12 xs:mt-8 xs:text-sm \"\r\n    let smallClasses = \"sm:h-12 sm:mt-10 sm:text-sm \"\r\n    let mediumClasses = \"md:h-16 md:mt-12 md:text-base \"\r\n    let defaultClasses = \"w-full text-white bg-brand border outline-none h-16 font-helvetica text-base rounded-lg tracking-wider px-4 py-2 mt-10 focus:shadow-outline-sm cursor-pointer\"\r\n    let allClasses = extraSmallClasses.concat(smallClasses).concat(mediumClasses).concat(defaultClasses)\r\n    return <Button {...props} classes={allClasses} />\r\n}\r\n\r\n\r\n\r\nButton.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    onSubmit: PropTypes.func,\r\n    classes: PropTypes.string\r\n\r\n}\r\n\r\nexport { ButtonBrand } ","import React from \"react\"\r\nimport { ButtonBrand as SignUpButton } from \"../../lib/Button\"\r\nimport { disabledContext } from \"./index\"\r\n\r\nclass SignUp extends React.Component {\r\n\r\n    static type = \"submit\"\r\n    static value = \"Sign up for Gitbank\"\r\n\r\n    render() {\r\n        return (<disabledContext.Consumer >{\r\n            ({ disabled }) => (<SignUpButton\r\n                type={SignUp.type}\r\n                value={SignUp.value}\r\n                disabled={disabled}\r\n                classes=\"font-semibold text-white mt-10\" />)\r\n        }\r\n        </disabledContext.Consumer>)\r\n    }\r\n}\r\n\r\nexport default SignUp","import React from \"react\"\r\n\r\nconst context = React.createContext({ disabled: true })\r\n\r\nexport default context","import SignupButton from \"./Button\"\r\nimport disabledContext from \"./context\"\r\nexport default SignupButton\r\nexport { disabledContext }","import React from \"react\"\r\nimport FormLayout from \"../../layouts/LayoutForm\"\r\nimport EmailField from \"./Email\"\r\nimport PasswordField from \"./Password\"\r\nimport UsernameField from \"./Username\"\r\nimport SignUpButton from \"./Signup\"\r\nimport { disabledContext } from \"./Signup\"\r\nimport { isValidatedForm } from \"./helpers/validation\"\r\n\r\nclass Form extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            fullname: \"\",\r\n        }\r\n    }\r\n\r\n    onType = (field, input) => this.setState({ [field]: input })\r\n\r\n    render() {\r\n        const { email, fullname, password } = this.state\r\n        return <FormLayout>\r\n            <disabledContext.Provider value={{ disabled: !isValidatedForm(this.state) }}>\r\n                <EmailField input={email} onType={this.onType} />\r\n                <UsernameField input={fullname} onType={this.onType} />\r\n                <PasswordField input={password} onType={this.onType} />\r\n                <SignUpButton />\r\n            </disabledContext.Provider>\r\n        </FormLayout>\r\n    }\r\n}\r\n\r\nexport default Form","import React from \"react\"\r\nimport { Form } from \"../components/Form\"\r\nclass App extends React.Component {\r\n    render() {\r\n        return (<div className=\"flex justify-center h-screen items-center\">\r\n            <Form />\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default App","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"./assets/css/main.css\"\r\nimport \"./assets/css/base.css\"\r\nimport App from \"./app\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode >\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}